Index: server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- server.py	(revision a033484035520f45290efcf94e766d7b2f4f20a0)
+++ server.py	(revision )
@@ -11,21 +11,33 @@
 """
 import os
 import sys
+import ast
 from flask import request, json, url_for, make_response, abort
 from flask import Flask, Response, jsonify
 from flask_api import status
 from flask_restplus import Api, Resource, fields
+from flask_mqtt import Mqtt
 from models import Product, DataValidationError, DatabaseConnectionError
 from werkzeug.exceptions import NotFound
 
 
 # Pull options from environment
-DEBUG = (os.getenv('DEBUG', 'False') == 'True')
+DEBUG = True #(os.getenv('DEBUG', 'False') == 'True')
 PORT = os.getenv('PORT', '5000')
 
 # Create Flask application
 app = Flask(__name__)
 
+# Configuring MQTT
+app.config['MQTT_BROKER_URL'] = 'broker.hivemq.com'  # use the free broker from HIVEMQ
+app.config['MQTT_BROKER_PORT'] = 1883  # default port for non-tls connection
+app.config['MQTT_USERNAME'] = ''  # set the username here if you need authentication for the broker
+app.config['MQTT_PASSWORD'] = ''  # set the password here if the broker demands authentication
+app.config['MQTT_KEEPALIVE'] = 5  # set the time interval for sending a ping to the broker to 5 seconds
+app.config['MQTT_TLS_ENABLED'] = False  # set TLS to disabled for testing purposes
+
+mqtt = Mqtt(app)
+
 # Status Codes
 HTTP_200_OK = 200
 HTTP_201_CREATED = 201
@@ -66,6 +78,52 @@
                             description='The total count of Product')
 })
 
+######################################################################
+# MQTT Subscription Handlers
+######################################################################
+
+@mqtt.on_connect()
+def handle_connect(client, userdata, flags, rc):
+    mqtt.subscribe('myTopic')
+
+@mqtt.on_message()
+def handle_mqtt_message(client, userdata, message):
+    print 'got msg'
+    data = dict(
+        topic=message.topic,
+        payload=message.payload.decode()
+    )
+    payload = ast.literal_eval(data['payload'])
+    if 'id' not in payload:
+        print 'in post'
+        create(payload)
+    else:
+        update(payload)
+
+
+def create(payload):
+    app.logger.info('Payload = %s', payload)
+    prod = Product()
+    prod.deserialize(payload)
+    prod.save()
+    app.logger.info('Product with new id [%s] saved!', prod.id)
+
+
+def update(payload):
+    p_id = payload['id']
+    data = payload['payload']
+    app.logger.info('Payload = %s', data)
+    product = Product.find(p_id)
+    if not product:
+        # api.abort(404, "Pet with id '{}' was not found.".format(pet_id))
+        raise NotFound(
+            'Product with id [{}] was not found.'.format(p_id))
+    # data = request.get_json()
+    app.logger.info('Product with id [%s] updated', p_id)
+    product.deserialize(data)
+    product.id = p_id
+    product.save()
+
 ######################################################################
 # Special Error Handlers
 ######################################################################
@@ -166,17 +224,14 @@
         app.logger.info(
             'Request to Update a product with id [%s]', products_id)
         check_content_type('application/json')
-        product = Product.find(products_id)
-        if not product:
-            #api.abort(404, "Pet with id '{}' was not found.".format(pet_id))
-            raise NotFound(
-                'Product with id [{}] was not found.'.format(products_id))
-        #data = request.get_json()
-        data = api.payload
-        app.logger.info(data)
-        product.deserialize(data)
+        data = dict(
+            id=products_id,
+            payload=api.payload
+        )
+        # mqtt.publish('put', str(data))
+        product = Product()
+        product.deserialize(data['payload'])
         product.id = products_id
-        product.save()
         return product.serialize(), status.HTTP_200_OK
 
     #------------------------------------------------------------------
@@ -254,9 +309,8 @@
         check_content_type('application/json')
         prod = Product()
         app.logger.info('Payload = %s', api.payload)
+        mqtt.publish('myTopic', str(api.payload))
         prod.deserialize(api.payload)
-        prod.save()
-        app.logger.info('Product with new id [%s] saved!', prod.id)
         location_url = api.url_for(
             ProductResource, products_id=prod.id, _external=True)
         return prod.serialize(), status.HTTP_201_CREATED, \
